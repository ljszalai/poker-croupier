#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'spectator_types'

    module API
      module Spectator
        class Client
          include ::Thrift::Client

          def name()
            send_name()
            return recv_name()
          end

          def send_name()
            send_message('name', Name_args)
          end

          def recv_name()
            result = receive_message(Name_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'name failed: unknown result')
          end

          def competitor_status(competitor)
            send_competitor_status(competitor)
            recv_competitor_status()
          end

          def send_competitor_status(competitor)
            send_message('competitor_status', Competitor_status_args, :competitor => competitor)
          end

          def recv_competitor_status()
            result = receive_message(Competitor_status_result)
            return
          end

          def bet(competitor, bet)
            send_bet(competitor, bet)
            recv_bet()
          end

          def send_bet(competitor, bet)
            send_message('bet', Bet_args, :competitor => competitor, :bet => bet)
          end

          def recv_bet()
            result = receive_message(Bet_result)
            return
          end

          def hole_card(competitor, card)
            send_hole_card(competitor, card)
            recv_hole_card()
          end

          def send_hole_card(competitor, card)
            send_message('hole_card', Hole_card_args, :competitor => competitor, :card => card)
          end

          def recv_hole_card()
            result = receive_message(Hole_card_result)
            return
          end

          def community_card(card)
            send_community_card(card)
            recv_community_card()
          end

          def send_community_card(card)
            send_message('community_card', Community_card_args, :card => card)
          end

          def recv_community_card()
            result = receive_message(Community_card_result)
            return
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_name(seqid, iprot, oprot)
            args = read_args(iprot, Name_args)
            result = Name_result.new()
            result.success = @handler.name()
            write_result(result, oprot, 'name', seqid)
          end

          def process_competitor_status(seqid, iprot, oprot)
            args = read_args(iprot, Competitor_status_args)
            result = Competitor_status_result.new()
            @handler.competitor_status(args.competitor)
            write_result(result, oprot, 'competitor_status', seqid)
          end

          def process_bet(seqid, iprot, oprot)
            args = read_args(iprot, Bet_args)
            result = Bet_result.new()
            @handler.bet(args.competitor, args.bet)
            write_result(result, oprot, 'bet', seqid)
          end

          def process_hole_card(seqid, iprot, oprot)
            args = read_args(iprot, Hole_card_args)
            result = Hole_card_result.new()
            @handler.hole_card(args.competitor, args.card)
            write_result(result, oprot, 'hole_card', seqid)
          end

          def process_community_card(seqid, iprot, oprot)
            args = read_args(iprot, Community_card_args)
            result = Community_card_result.new()
            @handler.community_card(args.card)
            write_result(result, oprot, 'community_card', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Name_args
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Name_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Competitor_status_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          COMPETITOR = 1

          FIELDS = {
            COMPETITOR => {:type => ::Thrift::Types::STRUCT, :name => 'competitor', :class => API::Competitor}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Competitor_status_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Bet_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          COMPETITOR = 1
          BET = 2

          FIELDS = {
            COMPETITOR => {:type => ::Thrift::Types::STRUCT, :name => 'competitor', :class => API::Competitor},
            BET => {:type => ::Thrift::Types::STRUCT, :name => 'bet', :class => API::Bet}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Bet_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Hole_card_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          COMPETITOR = 1
          CARD = 2

          FIELDS = {
            COMPETITOR => {:type => ::Thrift::Types::STRUCT, :name => 'competitor', :class => API::Competitor},
            CARD => {:type => ::Thrift::Types::STRUCT, :name => 'card', :class => API::Card}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Hole_card_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Community_card_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          CARD = 1

          FIELDS = {
            CARD => {:type => ::Thrift::Types::STRUCT, :name => 'card', :class => API::Card}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Community_card_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
